<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var string $term
 * @var array $query
 * @var array $options
 * @var array $field
 * @var array $references
 */

// The process seems complex because it uses many ways to display big lists.
// The templates are prepared for each case, in particular to avoid to call url(),
// then the references are looped to replace placeholders.

// The sub-level (list by) is limited to 1024 resources by mysql (group_concat).

// It is recommended to skip "link_to_single" when there are more than 5000
// references on a page and there are custom_url (clean url, ark...) with many
// single values.

if (!count($references)) return;

$plugins = $this->getHelperPluginManager();
$translate = $plugins->get('translate');
$escape = $plugins->get('escapeHtml');
$url = $plugins->get('url');
$api = $plugins->get('api');

// This is the Omeka default title. May be different in the database.
$emptyTitle = $translate('[Untitled]');
$siteSlug = $this->params()->fromRoute('site-slug')
    ?? (($site = $plugins->get('Laminas\View\Helper\ViewModel')->getRoot()->getVariable('site')) ? $site->slug() : null)
    // TODO Store the default site slug, not only the default site id.
    // If no default site, get the first public one.
    ?? (($site = $api->searchOne('sites', ['id' => $plugins->get('setting')('default_site'), 'sort_by' => 'is_public', 'sort_order' => 'desc'])->getContent()) ? $site->slug() : null);

$this->headLink()->prependStylesheet($this->assetUrl('css/reference.css', 'Reference'));

$mapResourcesControllers = ['resources' => 'resource', 'items' => 'item', 'item_sets' => 'item-set', 'media' => 'media'];
$controllerName = $mapResourcesControllers[$options['resource_name']];

// Set default values if needed.
$options += ['link_to_single' => true, 'total' => true, 'raw' => false, 'raw_sub' => false, 'skiplinks' => true, 'headings' => true, 'custom_url' => false];
$options['custom_url'] = $options['custom_url'] && $options['link_to_single'];
$hasInitial = array_key_exists('initial', $references[key($references)]);
$propertyTitle = 'dcterms:title';
$termId = $field['o:id'];
$term = @$field['o:term'];
$listByMax = empty($options['list_by_max']) ? false : (int) $options['list_by_max'];
$seeAll = $escape($translate('See allâ€¦')); // @translate
$andMore = $escape($translate('And %d more.')); // @translate
$hasSubjectProperty = !empty($options['subject_property']);
$options['link_to_single'] = $options['link_to_single'] && !$listByMax;
$isRecursive = $listByMax || $hasSubjectProperty;
$options['raw_sub'] = $options['raw_sub'] || !$isRecursive;

$querySource = $query;

$queryKeys = [
    'o:ResourceClass' => 'resource_class_id',
    'o:ResourceTemplate' => 'resource_template_id',
    'o:ItemSet' => 'item_set_id',
    'resource_classes' => 'resource_class_id',
    'resource_templates' => 'resource_template_id',
    'item_sets' => 'item_set_id',
];
$queryKey = $queryKeys[$field['@type']] ?? null;

// Set default templates according to options for improved performance.
$template = '';
$replaceBase = [];

if ($options['headings']) {
    if ($options['skiplinks']) {
        $templateHeading = '<h3 class="reference-heading" id="{heading_id}"><a href="#reference-skiplinks">{heading_text}</a></h3>' . PHP_EOL;
    } else {
        $templateHeading = '<h3 class="reference-heading" id="{heading_id}">{heading_text}</h3>' . PHP_EOL;
    }
    $template .= '{heading}';
    $replaceBase['{heading}'] = '';
}

$replaceBase['{reference_text}'] = '';

// List by max may require templateUrlSingle.
if (!$options['raw'] || ($listByMax && !$options['raw_sub'])) {
    $tempPlaceholder = '__temp_placeholder__';
    $templateUrlSingle = str_replace($tempPlaceholder, '{reference}', $url('site/resource-id', ['site-slug' => $siteSlug, 'controller' => $controllerName, 'id' => $tempPlaceholder], false));
}

if ($options['raw']) {
    if ($options['total']) {
        $template .= '<div class="reference-record">{reference_text}{reference_total}{recursive}</div>' . PHP_EOL;
        $replaceBase['{reference_total}'] = '';
    } else {
        $template .= '<div class="reference-record">{reference_text}{recursive}</div>' . PHP_EOL;
    }
} else {
    $replaceBase['{reference_url}'] = '';
    if ($options['total']) {
        $template .= '<div class="reference-record"><a href="{reference_url}">{reference_text}</a>{reference_total}{recursive}</div>' . PHP_EOL;
        $replaceBase['{reference_total}'] = '';
    } else {
        $template .= '<div class="reference-record"><a href="{reference_url}">{reference_text}</a>{recursive}</div>' . PHP_EOL;
    }
    if (!$options['custom_url']) {
        // Use the original query as the base of the url, avoiding overriding with the reference value.
        // The default url helper doesn't encode "&" as "&amp;", so append it manually.
        $query = $querySource;
        if ($queryKey) {
            $query[$queryKey][] = $termId;
            $queryEmpty = $query;
            $queryEmpty['property'][] = ['property' => $propertyTitle, 'type' => 'nex'];
            $templateUrlEmpty = $url('site/resource', ['site-slug' => $siteSlug, 'controller' => $controllerName], false) . '?' . http_build_query($queryEmpty, '', '&amp;', PHP_QUERY_RFC3986);
            $query['property'][] = ['property' => $propertyTitle, 'type' => 'eq', 'text' => '__temp_placeholder__'];
            $templateUrl = $url('site/resource', ['site-slug' => $siteSlug, 'controller' => $controllerName], false) . '?' . http_build_query($query, '', '&amp;', PHP_QUERY_RFC3986);
        } else {
            $query['property'][] = ['property' => $term, 'type' => 'eq', 'text' => '__temp_placeholder__'];
            $templateUrl = $url('site/resource', ['site-slug' => $siteSlug, 'controller' => $controllerName], false) . '?' . http_build_query($query, '', '&amp;', PHP_QUERY_RFC3986);
        }
        $templateUrl = str_replace('__temp_placeholder__', '{reference}', $templateUrl);
    }
}

$querier = function ($reference, $emptyReferenceValue, $limit = null) use ($term, $termId, $querySource, $queryKey, $propertyTitle) {
    $query = $querySource;
    if ($queryKey) {
        $query[$queryKey][] = $termId;
        $query['property'][] = $emptyReferenceValue
            ? ['property' => $propertyTitle, 'type' => 'nex']
            : ['property' => $propertyTitle, 'type' => 'eq', 'text' => $reference];
    } else {
        $query['property'][] = ['property' => $term, 'type' => 'eq', 'text' => $reference];
    }
    $query['limit'] = $limit;
    return $query;
};
?>

<?php
// Prepare and display skip links.
if ($options['skiplinks']):
    $paginationList = $this->partial('common/reference-skiplinks', ['references' => $references]);
?>
<div id="reference-skiplinks" class="pagination reference-pagination pagination-top">
    <?= $paginationList ?>
</div>
<?php endif; ?>

<div id="reference-headings">
    <?php

    $referenceUrl = '';
    $current_heading = '';
    $current_heading_id = '';
    foreach ($references as $referenceData):
        $emptyReferenceValue = is_null($referenceData['val']);
        $referenceValue = $emptyReferenceValue ? $emptyTitle : $referenceData['val'];
        $reference = (string) $referenceData['val'];

        $replace = $replaceBase;

        // Add the first character as header if wanted.
        if ($options['headings']) {
            if ($hasInitial) {
                $first_char = $referenceData['initial'];
            } else {
                $first_char = mb_strtoupper(mb_substr($reference, 0, 1));
                if (!strlen($first_char)) {
                    $first_char = '#0-9';
                }
            }
            if (preg_match('/\W|\d/u', $first_char)) {
                $first_char = '#0-9';
            }
            $current_first_char = $first_char;
            if ($current_heading !== $current_first_char) {
                $current_heading = $current_first_char;
                $current_heading_id = $current_heading === '#0-9' ? 'number' : $current_heading;
                $heading = [
                    '{heading_id}' => $current_heading_id,
                    '{heading_text}' => $current_heading,
                ];
                $heading = str_replace(array_keys($heading), array_values($heading), $templateHeading);
                $replace['{heading}'] = $heading;
            }
        }

        // FIXME ListByMax may need referenceUrl.

        if ($options['raw']) {
            $referenceText = $reference;
            $referenceNumber = true;
            $replace['{reference_text}'] = $referenceText;
        } else {
            $referenceNumber = !$options['link_to_single'] || $referenceData['total'] > 1;

            if ($options['custom_url']) {
                if ($referenceNumber) {
                    $referenceUrl = $url('site/resource', ['site-slug' => $siteSlug, 'controller' => $controllerName], ['query' => $querier($reference, $emptyReferenceValue)], false);
                } else {
                    // Don't use the resource to get the url, it's too slow, even if it allows to have customized url. Disable the feature if needed.
                    // $referenceUrl = $api->read($resourceName, $referenceData['first'])->getContent()->siteUrl();
                    $referenceUrl = str_replace('{reference}', rawurlencode($referenceData['first']), $templateUrlSingle);
                }

            } else {
                if ($referenceNumber) {
                    if ($queryKey) {
                        $referenceUrl = $emptyReferenceValue
                            ? $templateUrlEmpty
                            : str_replace('{reference}', rawurlencode($reference), $templateUrl);
                    } else {
                        $referenceUrl = str_replace('{reference}', rawurlencode($reference), $templateUrl);
                    }
                } else {
                    $referenceUrl = str_replace('{reference}', rawurlencode($referenceData['first']), $templateUrlSingle);
                }
            }

            $replace['{reference_text}'] = $referenceValue;
            $replace['{reference_url}'] = $referenceUrl;
        }

        // Can be null when references are set directly.
        if ($options['total'] && $referenceNumber && @$referenceData['total']) {
            $referenceTotal = ' (' . $referenceData['total'] . ')';
            $replace['{reference_total}'] = $referenceTotal;
        }

        $recursive = '';
        // TODO To be improved to avoid to read from the api (resources by reference or linked resources).
        // TODO Make it recursive.
        if ($listByMax) {
            $recursive .= '<ul class="recursive-list">';
            if ($options['raw_sub']) {
                foreach ($referenceData['resources'] as $resId => $resTitle) {
                    $recursive .= '<li>';
                    $recursive .= $escape($resTitle);
                    $recursive .= '</li>';
                }
                $hasMore = $referenceData['total'] > $listByMax;
                if ($hasMore) {
                    $recursive .= '<li class="see-all">';
                    $recursive .= sprintf($andMore, $referenceData['total'] - $listByMax);
                    $recursive .= '</li>';
                }
            } elseif ($referenceData['total'] === 1) {
                $recursive .= '<li>';
                $recursive .= '<a href="' . $referenceUrl . '">' . $escape(reset($referenceData['resources'])) . '</a>';
                $recursive .= '</li>';
            } else {
                // The link is not pretty for speed purpose.
                foreach ($referenceData['resources'] as $resId => $resTitle) {
                    $recursive .= '<li>';
                    $recursive .= '<a href="' . str_replace('{reference}', $resId, $templateUrlSingle) . '">' . $escape($resTitle) . '</a>';
                    $recursive .= '</li>';
                }
            }
            $hasMore = $referenceData['total'] > $listByMax;
            if ($hasMore) {
                $recursive .= '<li class="see-all">';
                $recursive .= '<a href="' . $referenceUrl . '">' . $seeAll . '</a>';
                $recursive .= '</li>';
            }
            $recursive .= '</ul>';
        } elseif ($hasSubjectProperty && !empty($referenceData['first'])) {
            /** @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation $res */
            $res = $api->read('resources', $referenceData['first'])->getContent();
            // $res = $api->read($res->resourceName(), $referenceData['first'])->getContent();
            $subjectValues = $res->subjectValues(null, null, $options['subject_property']['id']);
            if (count($subjectValues)) {
                $recursive .= '<ul class="recursive-list">';
                /** @var \Omeka\Api\Representation\ValueRepresentation $subjectValue */
                if ($options['raw_sub']) {
                    foreach ($subjectValues[$options['subject_property']['term']] as $subjectValue) {
                        $recursive .= '<li>';
                        $recursive .= $escape($subjectValue->resource()->displayTitle());
                        $recursive .= '</li>';
                    }
                } else {
                    foreach ($subjectValues[$options['subject_property']['term']] as $subjectValue) {
                        $recursive .= '<li>';
                        $recursive .= $subjectValue->resource()->linkPretty();
                        $recursive .= '</li>';
                    }
                }
                $recursive .= '</ul>';
            }
        }
        $replace['{recursive}'] = $recursive;

        // Process the output of one reference (and eventually the initial heading).
        echo str_replace(array_keys($replace), array_values($replace), $template);
        ?>
    <?php endforeach; ?>
</div>

<?php if ($options['skiplinks']): ?>
<div id="reference-skiplinks-bottom" class="pagination reference-pagination pagination-bottom">
    <?= $paginationList ?>
</div>
<?php endif;
